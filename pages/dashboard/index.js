/* eslint-disable react/jsx-props-no-spreading */
/* eslint-disable react/jsx-filename-extension */
import React, { useState, useEffect } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import Popup from 'reactjs-popup';
import api from '../../services/api';
import Input from '../../components/Input';
import Button from '../../components/Button';
import { useAuth } from '../../context/AuthContext';
import 'reactjs-popup/dist/index.css';
import { format, toDate } from 'date-fns';
import Header from 'components/Header';

const Dashboard = () => {
  const { user } = useAuth();

  const [items, setItems] = useState([]);
  const [taskName, setTaskName] = useState([]);
  const [taskDescription, setTaskDescription] = useState([]);
  const [editTask, setEditTask] = useState(false);
  const [editedId, setEditedId] = useState(false);

  // const [tasks, setTasks] = useState();

  const [open, setOpen] = useState(false);
  const closeModal = () => setOpen(false);

  async function loadCards() {
    const response = await api.get('api/v1/cards', { headers: { 'x-access-token': user.token } });
    setItems(response.data.data);
  }

  useEffect(() => {
    if (user?.token) {
      loadCards();
    }
  }, []);

  const handleAddCard = async () => {
    await api.post('api/v1/cards', {
      title: taskName,
      description: taskDescription,
    },
    { headers: { 'x-access-token': user.token } })
      .then(() => { loadCards(); closeModal(); })
      .catch(() => alert('Houve um erro, tente novamente'));
  };
  const handleUpdateCard = async () => {
    await api.put('api/v1/cards', {
      id: editedId,
      title: taskName,
      description: taskDescription,
    },
    { headers: { 'x-access-token': user.token } })
      .then(() => loadCards())
      .catch(() => alert('Houve um erro, tente novamente'));
    closeModal();
  };
  const handleDeleteCard = async (id) => {
    await api.delete('api/v1/cards', {
      data: { id },
      headers: { 'x-access-token': user.token },
    }).then(() => loadCards())
      .catch(() => alert('Houve um erro, tente novamente'));
  };

  const handleOnDragEnd = async ({ source, destination }) => {
    if (!destination) return;
    const [reorderedItem] = items.splice(source.index, 1);
    items.splice(destination.index, 0, reorderedItem);
    setItems(items);
  };

  return (
    <div className="min-h-screen flex
      flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8"
    >
      <div className="rounded-lg bg-indigo-300 flex flex-row items-center justify-between my-8 ">
        <h3 className="font-bold text-2xl px-10">Lista do que fazer</h3>
        <button
          onClick={() => {
            setEditTask(false);
            setTaskDescription('');
            setTaskName('');
            setOpen(true);
          }}
          type="button"
          className="rounded-lg bg-gray-400 p-4 text-white text-lg font-bold"
        >
          +
        </button>
        <Popup
          closeOnDocumentClick
          open={open}
          onClose={closeModal}
          modal
          nested
        >
          {() => (
            <div className="bg-gray-300	p-5">
              <h3 className="font-bold text-2xl text-center mb-4 px-10 text-gray-600">Insira uma tarefa</h3>
              <Input
                id="name"
                name="name"
                autoComplete="name"
                type="name"
                placeholder="Qual a tarefa? "
                required
                value={taskName}
                onChange={(e) => setTaskName(e.target.value)}
              />
              <Input
                id="name"
                name="name"
                autoComplete="name"
                type="name"
                placeholder="Qual a descri√ß√£o? "
                required
                value={taskDescription}
                onChange={(e) => setTaskDescription(e.target.value)}
              />
              <Button type="button" title={editTask ? 'Editar' : 'Adicionar'} className="m-8 " onClick={editTask ? handleUpdateCard : handleAddCard} />
            </div>
          )}
        </Popup>
      </div>
      <DragDropContext onDragEnd={handleOnDragEnd}>
        <Droppable droppableId="droppable">
          {(provided, snapshot) => (
            <div
              {...provided.droppableProps}
              ref={provided.innerRef}
              style={{
                background: snapshot.isDraggingOver ? 'lightblue' : '#eef',
                padding: 16,
                width: 400,
                borderRadius: 10,
              }}
            >
              {items.map((item, index) => (
                <Draggable
                  key={item.id}
                  draggableId={item.id}
                  index={index}
                  style={{
                    background: snapshot.isDraggingOver ? 'blue' : 'red',
                    // ...provided.draggableProps.style
                  }}
                >
                  {(provided, snapshot) => (
                    <div
                      ref={provided.innerRef}
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                      className="my-4 p-4 flex flex-col rounded-md bg-white border-gray-50 shadow-2xl	"
                    >
                      <div className="flex flex-row items-center justify-between my-0.5">
                        <h2 className="font-bold tracking-wide text-2xl">{item.title}</h2>
                        <div className="flex flex-row  items-center justify-between">
                          <button
                            type="button"
                            className="text-sm m-4 outline-transparent cursor-pointer"
                            onClick={() => {
                              setEditedId(item.id);
                              setEditTask(true);
                              setTaskName(item.title);
                              setTaskDescription(item.description);
                              setOpen(true);
                            }}
                          >
                            ‚úèÔ∏è
                          </button>
                          <button type="button" className="text-sm" onClick={() => handleDeleteCard(item.id)}>üóëÔ∏è</button>
                        </div>
                      </div>
                      <p className="text-lg my-2">
                        {item.description}
                      </p>
                      <div className="flex flex-row justify-between align-center mt-2 text-sm">
                        <p>{ format(toDate(+item.created_at), "dd/MM/yyyy HH:mm") }</p>
                        <p>
                          #
                          {index+1}
                        </p>
                      </div>
                    </div>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </div>
          )}
        </Droppable>
      </DragDropContext>
    </div>
  );
};

export default Dashboard;
