import React, { createContext, useState, useContext, useEffect } from 'react'
import Cookies from 'js-cookie'
import { useRouter } from 'next/router'

import api from '../services/api';

const AuthContext = createContext({});

export const AuthProvider = ({ children }) => {

    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        async function loadUserFromCookies() {
            const token = Cookies.get('token');
            if (token) {
                api.defaults.headers.Authorization = `Bearer ${token}`;
                const { data } = await api.get('users/');
                if (data) setUser(data);
            }
            setLoading(false)
        }
        loadUserFromCookies()
    }, [])

    const login = async (email, password) => {
        const { data: token } = await api.post('login', { email, password });
        if (token) {
            Cookies.set('token', token, { expires: 60 });
            api.defaults.headers.Authorization = `Bearer ${token.token}`;
            const { data } = await api.get('users/');
            setUser(data);
        }
    }

    const logout = (email, password) => {
				const router = useRouter()
        Cookies.remove('token');
        setUser(null);
        delete api.defaults.headers.Authorization;
        router.pathname = '/';
    }

    return (
        <AuthContext.Provider value={{ authenticated: !!user, user, login, loading, logout }}>
            {children}
        </AuthContext.Provider>
    )
}

export const VerifyAuth = ({children}) => {
	const { authenticated } = useAuth();
	const router = useRouter();
	const publicRoutes = [
		'/',
		'/signup'
	];

	const userIsInPublicRoute = publicRoutes.includes(router.pathname);

	if(process.browser){
		if (!authenticated){
			if(!userIsInPublicRoute){
				router.replace('/');
			}
		}else if(userIsInPublicRoute){
			router.replace('dashboard');
		}
	}


	return children;
};

export const useAuth = () => useContext(AuthContext)