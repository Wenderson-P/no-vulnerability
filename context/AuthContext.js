import React, {
  createContext, useState, useContext, useEffect,
} from 'react';
import Cookies, { set } from 'js-cookie';
import { useRouter } from 'next/router';

import api from '../services/api';

const AuthContext = createContext({});

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadUserFromCookies() {
      const token = Cookies.get('token');
      if (token) {
        api.defaults.headers.Authorization = `Bearer ${token}`;
        const { data } = await api.get('users/');
        if (data) setUser(data);
      }
      setLoading(false);
    }
    loadUserFromCookies();
  }, []);

  const handleLogin = async ({ username, password }) => {
    const { status, data } = await api.post('api/v1/login', { username, password });
    if (status === 200) {
      setUser({ username, password, token: data.token });
    }
  };
  const handleSignUp = async ({ username, email, password }) => {
    try {
      const response = await api.post('api/v1/register', { username, email, password });
      if (response.status === 201) {
        	setUser({ username, email, password });
      }
    } catch (error) {
      alert('Houve um erro na request');
      console.log(error);
    }
  };

  const handleLogout = (email, password) => {
    const router = useRouter();
    Cookies.remove('token');
    setUser(null);
    delete api.defaults.headers.Authorization;
    router.pathname = '/';
  };

  return (
    <AuthContext.Provider value={{
      authenticated: !!user, user, handleLogin, handleLogout, handleSignUp, loading,
    }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const VerifyAuth = ({ children }) => {
  const { authenticated } = useAuth();
  const router = useRouter();
  const publicRoutes = [
    '/',
    '/signup',
  ];

  const userIsInPublicRoute = publicRoutes.includes(router.pathname);

  if (process.browser) {
    if (!authenticated) {
      if (!userIsInPublicRoute) {
        router.replace('/');
      }
    } else if (userIsInPublicRoute) {
      router.replace('dashboard');
    }
  }

  return children;
};

export const useAuth = () => useContext(AuthContext);
